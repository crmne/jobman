.. _intro:

Introduction
============

The DD Object
+++++++++++++

Jobman relies heavily on the use of the ``DD`` object. ``DD`` s are simple Python
dictionaries, whose fields can be accessed using the standard bracket notation
of dictionaries or using the more user-friendly dotted notation. This is shown
in the example below.

.. code-block:: python

    from jobman import DD

    state = DD()
    state['key1'] = 'value1'
    state.key2 = 2
    print 'Key1 is %s and key2 is %i' %(state.key1, state['key2'])

DDs can also be hierarchical, i.e. a value in ``state`` can be another ``DD``,
and so on.

With this under our belt, let's proceed.


``jobman`` Executable
+++++++++++++++++++++

The first (baby)step should be to become familiar with the various Jobman options::

    $ jobman help

    Topics: (use help <topic> for more info)
    example        Example of defining and running an experiment.
    experiment     How to define an experiment.
    parameters     How to list the parameters for an experiment.

    Available commands: (use help <command> for more info)
    cachesync            Syncs the working directory of jobs with remote cache.
    check                Check that all jobs marked as running in the db are 
    			 marked as running in some cluster system.
    cmdline              Start an experiment with parameters given on the
     			 command line.
    help                 Get help for a topic.
    sql                  Run jobs from a sql table.
    sqlreload            Reload the sql db from the experiment directory.
    sqlstatus            Print/Change the status of jobs.
    sqlschedule          Schedule a job to run using the sql command.
    sqlschedules         Schedule multiple jobs from the command line to run
    			 using the sql command.
    sqlview              Create/drop a view of the scheduled experiments.

Further exploration can be done using ``jobman help <command>``.

Jobman Experiments
++++++++++++++++++

Jobman's purpose is to run experiments. To define an experiment, you only have
to define a function which respects the following protocol in a python file or
module:

.. code-block:: python

    def my_experiment(state, channel):
       # experiment code goes here

To be accessible from Jobman, this function should be in a module that can be
imported, using Python's ``import`` mechanism. The simplest way of running an
experiment is thus::

    jobman cmdline path.to.experiment <parameters>
    
where <parameters> are, in the simplest case, a sequence of keyword assignments.
For example::

    jobman cmdline path.to.experiment param1=string1 param2=3

We will see later on that there are many ways in which Jobman can pass these
parameters:

* using the command line: see ``jobman help cmdline``
* from a PostgreSQL database: see ``jobman help sql``
* combining the above with the contents of flat files


The ``state`` parameter
-----------------------

The ``state`` parameter is a DD containing the parameters passed by Jobman.

In the example given above, ``state.param1`` will contain the string 'string1' while
``state.param2`` will contain the integer 3.

Things which the user wishes to preserve (e.g. for future analysis) should be added
to the ``state`` dictionary. For example,

.. code-block:: python

    state.test_error = computeTestError()
    state.runtime = time.time()

The contents of the ``state`` dictionary are stored before and after program
execution, in the files ``orig.conf`` and ``current.conf`` respectively. These
files are saved in the current working directory (see below for details).

It is not recommended to store large amounts of data in the state. It
should be limited to scalar or string parameters. Results such as
weight matrices should be stored in files in the working directory (e.g.
through pickling or other mechanisms).

If the state is changed, it will be saved when the experiment ends
or when channel.save() is called. The next time the experiment is run
with the same working directory, the modified state will be provided.


The ``channel`` parameter (basics)
----------------------------------

The return value of my_experiment may be channel.COMPLETE or
channel.INCOMPLETE. If the latter is returned, the experiment may
be resumed at a later point. Note that the return value ``None``
is interpreted as channel.COMPLETE.

For a more in-depth treatment of the ``channel`` parameter, we refer the reader
to the :ref:`Advanced` section.

Working Directory
-----------------

When entering my_experiment, the current working directory will be
set for you to a directory specially created for the experiment.
The location and name of that directory vary depending on which
jobman command you run. You may create logs, save files, pictures,
results, etc. in it.



Basic Example
+++++++++++++

Let's have a look at a simple example. In this experiment, ``state``
should have at least two keys, ``first`` and ``second``, and numbers
associated with them. The code is available under ``Jobman/jobman/examples/def_addition.py``.

.. code-block:: python

    def addition_example(state, channel):
        print 'state.first =', state.first
        print 'state.second =', state.second

        state.result = state.first + state.second

        print 'result =', state.result

        return channel.COMPLETE

Here, the code to be executed is simplistic (an addition), but
it illustrates how to retrieve arguments from ``state``, via
``state.first`` and ``state.second``, and store the results back in
``state.result``. Note that writing the above code, requires that you already
know what keys will be passed in the dictionary state. 

To launch the above experiment using the command line, one can run the
following command from a given directory::

    jobman cmdline jobman.examples.def_addition.addition_example first=2 second=5


which outputs,

::

    state.first = 2
    state.second = 5
    result = 7

Additionally, this command created a temp directory. Lets have a look at its
contents.

::

    $ ls jobman_<timestamp>/
    current.conf  orig.conf

    $ cat jobman_<timestamp>/orig.conf
    second = 5
    jobman.experiment = 'jobman.examples.def_addition.addition_example'
    jobman.time = 'Thu Sep 17 17:00:18 2009'
    first = 2

    $ cat jobman_<timestamp>/current.conf
    jobman.experiment = 'jobman.examples.def_addition.addition_example'
    second = 5
    jobman.status = 2
    result = 7
    jobman.time = 'Thu Sep 17 17:00:18 2009'
    first = 2

As was mentionned previously, jobman created a temporary work directory
containing the orig.conf file (which contains program parameters, path of the
experiment and a timestamp) and current.conf file, which contains the result
of the computation.
